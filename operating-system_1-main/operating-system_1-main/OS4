#include <stdio.h>
struct Process {
    int pid; 
    int arrival_time; 
    int burst_time; 
    int priority; 
    int completion_time; 
    int turnaround_time; 
    int waiting_time; 
    int executed; 
};

void calculateTimes(struct Process processes[], int n) {
    int current_time = 0;
    int total_completion_time = 0;
    int total_waiting_time = 0;
    for (int i = 0; i < n; i++) {
        processes[i].executed = 0;
    }

    while (1) {
        int highest_priority = -1;
        int highest_index = -1;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && !processes[i].executed && processes[i].priority > highest_priority) {
                highest_priority = processes[i].priority;
                highest_index = i;
            }
        }

        if (highest_index == -1) {
            break;
        }
        processes[highest_index].waiting_time = current_time - processes[highest_index].arrival_time;
        processes[highest_index].completion_time = current_time + processes[highest_index].burst_time;
        processes[highest_index].turnaround_time = processes[highest_index].completion_time - processes[highest_index].arrival_time;
        processes[highest_index].executed = 1;
        current_time = processes[highest_index].completion_time;
        total_waiting_time += processes[highest_index].waiting_time;
        total_completion_time += processes[highest_index].completion_time;
    }
    float avg_turnaround_time = (float)total_completion_time / n;
    float avg_waiting_time = (float)total_waiting_time / n;
    printf("\nProcess\tArrival Time\tBurst Time\tPriority\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time,
               processes[i].burst_time, processes[i].priority, processes[i].completion_time,
               processes[i].turnaround_time, processes[i].waiting_time);
    }
    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround_time);
    printf("Average Waiting Time: %.2f\n", avg_waiting_time);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    printf("Enter arrival time, burst time, and priority for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Arrival time of process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time of process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        printf("Priority of process %d: ", i + 1);
        scanf("%d", &processes[i].priority);
    }
    calculateTimes(processes, n);

    return 0;
}
