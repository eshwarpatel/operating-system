#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_THREADS 2

void *thread_function(void *arg) {
    int thread_id = *((int *)arg);
    printf("Thread %d: Hello, World!\n", thread_id);
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];
    int thread_args[NUM_THREADS];
    int rc, t;

    for (t = 0; t < NUM_THREADS; t++) {
        thread_args[t] = t;
        printf("Creating thread %d\n", t);
        rc = pthread_create(&threads[t], NULL, thread_function, (void *)&thread_args[t]);
        if (rc) {
            printf("ERROR: return code from pthread_create() is %d\n", rc);
            exit(EXIT_FAILURE);
        }
    }

    for (t = 0; t < NUM_THREADS; t++) {
        printf("Joining thread %d\n", t);
        rc = pthread_join(threads[t], NULL);
        if (rc) {
            printf("ERROR: return code from pthread_join() is %d\n", rc);
            exit(EXIT_FAILURE);
        }
    }

    if (pthread_equal(threads[0], threads[1])) {
        printf("Threads are equal.\n");
    } else {
        printf("Threads are not equal.\n");
    }

    printf("Main: Exiting\n");
    pthread_exit(NULL);
}
