#include <stdio.h>
#include <stdlib.h>

struct Process {
    int pid; 
    int arrival_time;
    int burst_time;
    int priority; 
    int remaining_time; 
    int completion_time; 
    int turnaround_time; 
    int waiting_time; 
    int executed; 
};

int findHighestPriorityProcess(struct Process processes[], int n, int current_time) {
    int highest_priority = 9999;
    int index = -1;
    for (int i = 0; i < n; i++) {
        if (!processes[i].executed && processes[i].arrival_time <= current_time && processes[i].priority < highest_priority) {
            highest_priority = processes[i].priority;
            index = i;
        }
    }
    return index;
}

int allProcessesExecuted(struct Process processes[], int n) {
    for (int i = 0; i < n; i++) {
        if (!processes[i].executed) {
            return 0;
        }
    }
    return 1;
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    printf("Enter arrival time, burst time, and priority for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Arrival time of process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time of process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        printf("Priority of process %d: ", i + 1);
        scanf("%d", &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].executed = 0;
    }

    int current_time = 0;
    int total_completion_time = 0;
    int total_waiting_time = 0;

    while (!allProcessesExecuted(processes, n)) {
        int highest_priority_index = findHighestPriorityProcess(processes, n, current_time);
        if (highest_priority_index != -1) {
            struct Process *current_process = &processes[highest_priority_index];
            current_process->remaining_time--;
            current_time++;

            if (current_process->remaining_time == 0) {
                current_process->completion_time = current_time;
                current_process->turnaround_time = current_process->completion_time - current_process->arrival_time;
                current_process->waiting_time = current_process->turnaround_time - current_process->burst_time;
                current_process->executed = 1;

                total_completion_time += current_process->completion_time;
                total_waiting_time += current_process->waiting_time;
            }
        } else {
            current_time++;
        }
    }

    float avg_turnaround_time = (float)total_completion_time / n;
    float avg_waiting_time = (float)total_waiting_time / n;

    printf("\nProcess\tArrival Time\tBurst Time\tPriority\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time,
               processes[i].burst_time, processes[i].priority, processes[i].completion_time,
               processes[i].turnaround_time, processes[i].waiting_time);
    }
    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround_time);
    printf("Average Waiting Time: %.2f\n", avg_waiting_time);

    return 0;
}
